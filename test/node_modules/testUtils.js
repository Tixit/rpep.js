var utils = require("../../utils")

// Define the functions up front, and when you call the return value, it passes the arguments you call it with to the functions in sequence
// returns a function that, each time its called, calls the next function in the list with the passed argument
// example:
/*
var sequenceX = testUtils.seq(
 function(x) {
     t.ok(x === 'a')
 },
 function(x) {
     t.ok(x === 'b')
 },
 function(x) {
     t.ok(x === 'c')
})

 var obj = {a:1,b:2,c:3}
 for(var x in obj) {
     sequenceX(x)
 }
 */
exports.seq = function(/*functions*/) {
    var n=-1
    var fns = arguments
    return function() {
        n++
        if(n>=fns.length)
            throw new Error("Unexpected call: "+n)
        // else
        fns[n].apply(this,arguments)
    }
}


exports.runTest = function(that, name, serialization, transport, options) {
    var serverTests = require('./rpep.server.test')
    var clientTests = require('./rpep.client.test')

    var one = that.test('server - '+name, serverTests(transport, serialization, options))
    var two = that.test('client - '+name, clientTests(transport, serialization, options))

    return one.complete.then(function() {
        return two.complete
    })
}

exports.createSerializationTestOptions = function(serialization) {
    var options = {
        listenerNoOnClose: [{port:1, createOnClose:false}], clientNoOnClose: [{port:1, createOnClose:false}],
        testAcceptParameters: true,
        clientErrorOptions: [{port:2, throwErrors:[new Error("failed to connect"), new Error("blarg")]}],
        clientError: "Connection couldn\'t be opened: \nError: failed to connect\nError: blarg",
        listenerErrorOptions: [{port:3, throwError:new Error("some error")}],
        listenerError: "some error",
        rawMessages: exports.createRawMessageTests(serialization),
        nextListenerOptions: function(lastOptions) {
            if(lastOptions === undefined) return [{port:6}]
            return [{port:lastOptions[0].port+1}]
        },
        nextClientOptions: function(lastOptions) {
            if(lastOptions === undefined) return [{port:6}]
            return [{port:lastOptions[0].port+1}]
        }
    }

    return options
}

exports.createRawMessageTests = function(serialization) {
    return [
        {message: 'x', matchTest: function(m) {
            return utils.equal(m, serialization.serialize(["x"]))
        }},
        {message: 'ignoreMe', matchTest: function(m) {
            return utils.equal(m, serialization.serialize(["ignoreMe"]))
        }},
        {message: 'ignoreMeRaw', matchTest: function(m) {
            return utils.equal(m, serialization.serialize(["ignoreMeRaw"]))
        }}
    ]
}