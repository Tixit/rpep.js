var utils = require("../../utils")
var seq = require("testUtils").seq
var rpep = require('../../rpep')

// options
    // listenerOptions - options to pass into each server.listen in the test
    // rawMessages - An array of 3 elements, where each element is an array with two elements:
        // the first element of each is the string message
        // the second element of each is a function that's passed the resulting raw message, and should return true if it matches what's expected based on the first element
module.exports = function(getTestTransport, testSerialization, options) {
    var lastOptions;
    var nextOptions = function() {
        lastOptions = options.nextListenerOptions(lastOptions)
        return lastOptions
    }

    return function() {




        //*

        this.test("connect and close", function() {
            this.test('basic successful connection, closed on connecting end', function(t) {
                var server = rpep(getTestTransport(), testSerialization)
                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    server.close()
                }))
            })
            this.test('basic successful connection, closed on listening end', function(t) {
                var connectionResolver = utils.resolver()

                var server = rpep(getTestTransport(), testSerialization)
                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    setTimeout(function() {
                        conn.close()
                        server.close()
                    })
                }))
            })
            this.test('basic connection error(s)', function(t) {
                // nothing needs to happen here
            })
        })

        this.test("listen and close", function() {
            this.test('basic listen, closed on listening end', function(t) {
                this.count(5)

                var server = rpep(getTestTransport(), testSerialization)
                server.listen.apply(server, nextOptions().concat(function(request) {
                    t.ok(request.rawRequest !== undefined)

                    var conn = request.accept()
                    t.ok(conn !== undefined)
                    conn.on('close', function() {
                        t.ok(true)
                    })

                    conn.close()
                    server.close()
                })).then(function(){
                    t.ok(true)
                })

                server.on('close', function() {
                    t.ok(true)
                })
            })
            this.test('basic listen, closed on connecting end', function(t) {
                this.count(4)

                var server = rpep(getTestTransport(), testSerialization)
                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    t.ok(conn !== undefined)
                    conn.on('close', function() {
                        t.ok(true)
                        server.close()
                    })
                })).then(function(){
                    t.ok(true)
                })

                server.on('close', function() {
                    t.ok(true)
                })
            })
            this.test('basic listen, rejection', function(t) {
                var server = rpep(getTestTransport(), testSerialization)
                server.listen.apply(server, nextOptions().concat(function(request) {
                    request.reject()
                    server.close()
                }))
            })
            this.test('basic listen error', function(t) {
                this.count(1)

                var server = rpep(getTestTransport(), testSerialization)
                server.listen.apply(server, options.listenerErrorOptions.concat(function(request) {
                    t.ok(false)
                })).catch(function(e) {
                    t.eq(e.message, options.listenerError)
                    server.close()
                })
            })
        })

        this.test("fire and receive", function(t) {
            this.count(10)

            var event = seq(function(eventName, req) {
                t.eq(eventName,'a')
                t.eq(req,undefined)
            },function(eventName, req) {
                t.eq(eventName,'b')
                t.eq(req,5)
            },function(eventName, e) {
                t.eq(eventName,'server error')
                t.ok(e instanceof Error)
                t.eq(e.message, 'error from client')
                t.eq(e.someData, 'client data')
            },function(eventName, e) {
                t.eq(eventName,'connection error')
                t.eq(e.message, 'ughhh')
            })


            var server = rpep(getTestTransport(), testSerialization)
            server.receive('a', function(req) {
                event('a', req)
                this.fire('d', 3, 4)
            })
            server.receive('b', function(req) {
                event('b', req)
                this.fire('error', new Error("error from server"))
            })
            server.receive('error', function(e) {
                event('server error', e)
                throw new Error("ughhh")
            })

            server.listen.apply(server, nextOptions().concat(function(request) {
                var conn = request.accept()
                conn.on('error', function(e) {
                    event('connection error', e)
                    server.close()
                })

                conn.fire('c')
            }))
        })

        this.test("send/receive", function(t) {
            this.test("basic send/receive", function(t) {
                this.count(20)

                var event = seq(function(eventName, id) {
                    t.eq(eventName,'a')
                    t.eq(id,1)
                },function(eventName, one, id) {
                    t.eq(eventName,'b')
                    t.eq(one,'hi')
                    t.eq(id,3)
                },function(eventName, one, two, id) {
                    t.eq(eventName,'c')
                    t.eq(one,99)
                    t.eq(two,'bwak')
                    t.eq(id,5)
                },function(eventName, result) {
                    t.eq(eventName,'d result')
                    t.eq(result, 3)
                },function(eventName, e) {
                    t.eq(eventName,'e error')
                    t.ok(e instanceof Error)
                    t.eq(e.message, "e error")
                },function(eventName, e) {
                    t.eq(eventName,'f error')
                    t.ok(e instanceof Error)
                    t.eq(e.message, "unexpectedPeerError")
                },function(eventName, e) {
                    t.eq(eventName,'server error')
                    t.ok(e instanceof Error)
                    t.eq(e.message, "Ay yay yaaay!")
                })


                var server = rpep(getTestTransport(), testSerialization)
                server.respond('a', function(id) {   // return normal value
                    event('a', id)
                    return 1
                })
                server.respond('b', function(one, id) {   // return promise error
                    event('b', one, id)

                    return new Promise(function(resolve, reject){
                        var error = new rpep.PeerError("b error")
                        error.someData = 'data'
                        throw error
                    })
                })
                server.respond('c', function(one, two, id) {   // fail on promise error (non-PeerError)
                    event('c', one, two, id)

                    var that = this
                    return this.request("d", 'yo', 'boy').then(function(result) {
                        event('d result', result)
                        return that.request('e')
                    }).catch(function(e){
                        event('e error', e)
                        return that.request('f')
                    }).catch(function(e) {
                        event('f error', e)
                        throw new Error("Ay yay yaaay!")
                    })
                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    conn.on('error', function(e) {
                        event('server error',e)
                    })
                    conn.on('close', function() {
                        server.close()
                    })
                }))
            })

            this.test("multiple outstanding calls to the same request", function(t) {
                var server = rpep(getTestTransport(), testSerialization)
                var AResolvers = [], BResovler = utils.resolver()
                server.respond('a', function() {
                    var r = utils.resolver()
                    AResolvers.push(r)
                    if(AResolvers.length == 2) {
                        BResovler.resolve()
                    }

                    return r.f
                })
                server.receive('b', function() {
                    BResovler.f.then(function() {
                        AResolvers.forEach(function(r, index) {
                            r.resolve(index)
                        })
                    })
                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    conn.on('close', function() {
                        server.close()
                    })
                }))
            })

            this.test('id discontinuity', function(t) {
                this.count(9)

                var event2;
                var event = seq(function(eventName, id) {
                    t.eq(eventName,'a')
                    t.eq(id,1)
                },function(eventName, prev,next) {
                    event2 = eventName
                    if(eventName === 'idDiscontinuity') {
                        t.eq(eventName, 'idDiscontinuity')
                        t.eq(prev, 3)
                        t.eq(next, 1)
                    } else {
                        var id = prev
                        t.eq(eventName,'a')
                        t.eq(id,3)
                    }
                },function(eventName, id, thirdParam) {
                    if(event2 === 'idDiscontinuity') {
                        t.eq(eventName,'a')
                        t.eq(id,3)
                    } else {
                        var prev = id, next = thirdParam
                        t.eq(eventName, 'idDiscontinuity')
                        t.eq(prev, 3)
                        t.eq(next, 1)
                    }
                },function(eventName, id) {
                    t.eq(eventName,'a')
                    t.eq(id,1)
                })

                
                var server = rpep(getTestTransport(), testSerialization)
                server.respond('a', function(id) {   // return normal value
                    event('a', id)
                    return 10
                })
                server.receive('idDiscontinuity', function(prev,next) {
                    event('idDiscontinuity', prev,next)
                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    conn.on('close', function() {
                        server.close()
                    })
                }))
            })
        })

        this.test("event streams", function(t) {
            this.test('basic event streams', function(t) {
                this.count(20)

                var event = seq(function(eventName, id) {       // client-started event-stream
                    t.eq(eventName,'server a')
                    t.eq(id,1)
                },function(eventName, args) {
                    t.eq(eventName,'server two')
                    t.eq(args.length, 2)
                    t.eq(args[0], 'a')
                    t.eq(args[1], 'b')
                },function(eventName) {
                    t.eq(eventName,'server sendError')
                },function(eventName) {
                    t.eq(eventName,'server sendEnd')
                },function(eventName, e) {
                    t.eq(eventName,'server connection error')
                    t.eq(e.message, "NOOOOOOO")
                },function(eventName) {
                    t.eq(eventName,'server end')

                },function(eventName) {
                    t.eq(eventName,'server one2')
                },function(eventName, x) {
                    t.eq(eventName,'server two2')
                    t.eq(x,2)
                },function(eventName, x,y) {
                    t.eq(eventName,'server three2')
                    t.eq(x,3)
                    t.eq(y,4)
                },function(eventName, e) {
                    t.eq(eventName,'server error2')
                    t.eq(e.message, "whats up")
                },function(eventName) {
                    t.eq(eventName,'server end2')
                })


                var server = rpep(getTestTransport(), testSerialization)
                server.stream('a', function(stream, id) {   // return normal value
                    event('server a', id)
                    stream.emit('one')

                    var that = this
                    stream.onAny(function(eventName, args) {
                        var args = Array.prototype.slice.call(arguments,1)
                        event('server '+eventName, args)

                        if(eventName === 'two') {
                            stream.emit('two', 2)
                            stream.emit('three', 3, 4)
                        } else if(eventName === 'sendError') {
                            stream.emit('error', new Error("wut up"))
                        } else if(eventName === 'sendEnd') {
                            stream.emit('end')
                            throw new Error("NOOOOOOO")
                        } else if(eventName === 'end') {
                            var stream2 = that.streamConnect('b', 'one','two')
                            stream2.on('one', function() {
                                event('server one2')
                                stream2.emit('two', 'x','y')
                            })
                            stream2.on('two', function(x) {
                                event('server two2', x)
                            })
                            stream2.on('three', function(x, y) {
                                event('server three2', x, y)
                                stream2.emit('sendError')
                            })
                            stream2.on('error', function(e) {
                                event('server error2', e)
                                stream2.emit('doError')
                                stream2.emit('end', 5,6)
                            })
                            stream2.on('end', function() {
                                event('server end2')

                                server.close()
                            })
                        }
                    })
                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    conn.on('error', function(e) {
                        event('server connection error',e)
                    })
                }))
            })

            this.test("multiple outstanding streams of the same command", function(t) {
                var endsReceived = 0

                var server = rpep(getTestTransport(), testSerialization)
                server.stream('a', function(stream, number, id) {   // return normal value
                    stream.on('x', function() {
                        stream.emit('hi', number)
                    })

                    stream.on('end', function() {
                        stream.emit('end') // confirm end

                        endsReceived++
                        if(endsReceived === 2) {
                            server.close()
                        }
                    })
                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                }))
            })

            this.test('event order numbers and order number discontinuity', function(t) {
                var server = rpep(getTestTransport(), testSerialization, {maxId: 2})
                server.stream('a', function(stream, number, id) {   // return normal value
                    stream.on('x', function() {
                        var args = Array.prototype.slice.call(arguments)
                        stream.emit.apply(stream, ['hi'].concat(args))
                    })
                    stream.on('end', function() {
                        stream.emit('end') // confirm end

                        server.close()
                    })
                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                }))
            })
        })

        this.test('sessionData', function(t) {
            this.count(7)

            var server = rpep(getTestTransport(), testSerialization)
            server.receive('a', function() {
                t.eq(Object.keys(this.sessionData).length, 0)
                this.sessionData.x = 1
            })
            server.respond('b', function() {
                t.eq(Object.keys(this.sessionData).length, 1)
                t.eq(this.sessionData.x, 1)
                this.sessionData.x = 2
            })
            server.stream('c', function(stream) {   // return normal value
                t.eq(Object.keys(this.sessionData).length, 1)
                t.eq(this.sessionData.x, 2)
                this.sessionData.x = 3
                stream.emit('end')
            })
            server.receive('d', function() {
                t.eq(Object.keys(this.sessionData).length, 1)
                t.eq(this.sessionData.x, 3)

                server.close()
            })

            server.listen.apply(server, nextOptions().concat(function(request) {
                var conn = request.accept()
            }))
        })

        this.test("rawHandle, preHandle, and default", function(t) {
            this.count(15)

            var event = seq(function(eventName, rawMessage) {   // first call
                t.eq(eventName,'server rawHandle')
                t.ok(options.rawMessages[0].matchTest(rawMessage), rawMessage)
            },function(eventName, message) {
                t.eq(eventName,'server preHandle')
                t.eq(message.length,1)
                t.eq(message[0],options.rawMessages[0].message)
            },function(eventName, message) {
                t.eq(eventName,'server default')
                t.eq(message.length,1)
                t.eq(message[0],'x')

            },function(eventName, rawMessage) {                  // second call
                t.eq(eventName,'server rawHandle')
                t.ok(options.rawMessages[1].matchTest(rawMessage), rawMessage)
            },function(eventName, message) {
                t.eq(eventName,'server preHandle')
                t.eq(message.length,1)
                t.eq(message[0],options.rawMessages[1].message)

            },function(eventName, rawMessage) {                  // third call
                t.eq(eventName,'server rawHandle')
                t.ok(options.rawMessages[2].matchTest(rawMessage), rawMessage)

                server.close()
            })


            var server = rpep(getTestTransport(), testSerialization)
            server.rawHandle(function(rawMessage) {
                event('server rawHandle',rawMessage)
                if(rawMessage.indexOf('ignoreMeRaw') !== -1) {
                    return 'ignore'
                }
            })
            server.preHandle(function(message) {
                event('server preHandle',message)
                if(message[0] === 'ignoreMe') {
                    return 'ignore'
                }
            })
            server.default(function(message) {
                event('server default',message)
            })

            server.listen.apply(server, nextOptions().concat(function(request) {
                var conn = request.accept()
            }))
        })

        this.test('default error handlers', function() {
            this.test("no 'error' receive handler", function(t) {
                this.count(1)

                var server = rpep(getTestTransport(), testSerialization)

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    conn.on('error', function(e) {
                        t.eq(e.message, "unhandled error")

                        server.close()
                    })
                }))
            })
            this.test("no 'error' event handler", function(t) {
                this.count(1)

                var server = rpep(getTestTransport(), testSerialization)
                server.stream('a', function(stream) {

                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    conn.on('error', function(e) {
                        t.eq(e.message, "unhandled error")

                        server.close()
                    })
                }))
            })
        })

        if(options.listenerNoOnClose) {
            this.test("close messages for transports that don't have onClose handlers", function(t) {
                this.count(2)

                var testTransportCopy = {}, testTransport = getTestTransport()
                for(var k in testTransport) {
                    testTransportCopy[k] = testTransport[k]
                }
                delete testTransportCopy.onClose

                var server = rpep(testTransportCopy, testSerialization)
                server.preHandle(function(c) {
                    t.eq(c[0], 'close')
                })

                server.listen.apply(server, options.listenerNoOnClose.concat(function(request) {
                    var conn = request.accept()

                    conn.on('close', function() {
                        t.ok(true)

                        server.close()
                    })
                }))
            })
        }

        this.test('errors', function(t) {
            this.test("basic errors", function(t) {
                var server = rpep(getTestTransport(), testSerialization)
                server.receive('endTest', function() {
                    server.close()
                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                }))
            })

            if(options.clientWithRawMessageSend) {
                this.test("invalidId error", function(t) {
                    var server = rpep(getTestTransport(), testSerialization)
                    server.respond('a', function() {
                        t.ok(false) // won't get here
                    })
                    server.receive('endTest', function() {
                        server.close()
                    })

                    server.listen.apply(server, options.clientWithRawMessageSendClient.concat(function(request) {
                        var conn = request.accept()
                    }))
                })
            }

            this.test("ensure no events can be emitted after sending 'end'", function(t) {
                var server = rpep(getTestTransport(), testSerialization)
                server.stream('a', function(emitter) {
                    emitter.on('end', function() {
                        server.close()
                    })
                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                }))
            })

            if(options.listenerWithRawMessageSend) {
                this.test("ensure no events can be received after receiving and sending 'end'", function(t) {
                    this.count(1)

                    var server = rpep(getTestTransport(), testSerialization)
                    server.stream('a', function(emitter,id) {
                        emitter.on('end', function() {
                            emitter.emit('end')

                            setTimeout(function() { // ensure this \/ happens after the end event sent above
                                options.serverSend(testSerialization.serialize([id, 'somethingElse']))
                            })
                        })
                    })
                    server.receive('error', function(e) {
                        t.eq(e.message, 'rpepIdNotFound')

                        server.close()
                    })

                    server.listen.apply(server, options.listenerWithRawMessageSend.concat(function(request) {
                        var conn = request.accept()
                    }))
                })
            }

            this.test("closeTimeout", function(t) {
                var server = rpep(getTestTransport(), testSerialization)
                server.respond('a', function() {
                    return this.request('x') // will never resolve
                })
                server.stream('b', function(emitter) {
                    // never sends 'end' event
                })
                server.stream('c', function(emitter) {
                    emitter.emit('end')       // never receives 'end' event
                })
                server.stream('d', function(emitter) {
                    // never sends nor receives an 'end' event
                })

                server.listen.apply(server, nextOptions().concat(function(request) {
                    var conn = request.accept()
                    conn.on('close', function() {
                        server.close()
                    })
                }))
            })
        })

        //*/
    }

}